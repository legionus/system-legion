#!/bin/bash -efu
# SPDX-License-Identifier: GPL-2.0-only

PROG="${0##*/}"
tree_id=''

fatal()
{
	printf >&2 '%s: %s\n' "$PROG" "$*"
	exit 1
}

TEMP="$(getopt -n "$PROG" -o c:,h,V -l commit:,help,version -- "$@")" ||
	fatal "Try \`$PROG --help' for more information."
eval set -- "$TEMP"
while :; do
	case "$1" in
		-h|--help) printf '%s\n' \
			"Usage: $PROG [options] <filespec>" \
			"" \
			"The filespec should be in form: FILENAME[:LINENO[:COLUMN]]. If a" \
			"tree-ish is given, then FILENAME can be prefixed with a/ or b/ to" \
			"indicate which version of the file to open." \
			"" \
			"Example:" \
			"" \
			"[~/linux]\$ $PROG Makefile:6:8" \
			"[~/linux]\$ $PROG -c 858fd168a95c a/Makefile:6:8" \
			"[~/linux]\$ $PROG -c 858fd168a95c b/Makefile:6:8" \
			"" \
			"Options:" \
			"  -c, --commit=ID   checkout file from tree-ish;" \
			"  -V, --version     print program version and exit;" \
			"  -h, --help        show this text and exit." \
			"" \
			"Report bugs to authors." \
			""
			exit
			;;
		-V|--version) printf '%s\n' \
			"$PROG version 1.0" \
			"Written by Alexey Gladkov <gladkov.alexey@gmail.com>" \
			"" \
			"Copyright (C) 2023  Alexey Gladkov <gladkov.alexey@gmail.com>" \
			"This is free software; see the source for copying conditions.  There is NO" \
			"warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE." \
			""
			exit
			;;
		-c|--commit)
			tree_id="$(git rev-parse --short --verify "$2")" ||
				fatal "$1: $2: tree-ish not available."
			shift
			;;
		--)
			shift
			break
			;;
	esac
	shift
done

if [ "$#" -gt 0 ]; then
	lineno='' column=1 filename="$1"
	shift

	if [[ "$filename" =~ ^(.*):([0-9]+):([0-9]+):?$ ]]; then
		filename="${BASH_REMATCH[1]}"
		lineno="${BASH_REMATCH[2]}"
		column="${BASH_REMATCH[3]}"
	elif [[ "$filename" =~ ^(.*):([0-9]+):?$ ]]; then
		filename="${BASH_REMATCH[1]}"
		lineno="${BASH_REMATCH[2]}"
	fi

	if [ -n "$tree_id" ] && [ -n "${filename##/*}" ]; then
		case "$filename" in
			a/*)	filename="${filename#a/}"
				tree_id="$(git rev-parse --short --verify "$tree_id^")"
				f_type="$(git cat-file -t -- "$tree_id:$filename")" ||
					fatal "unable to find object: $tree_id:$filename"
				[ "$f_type" = blob ] ||
					fatal "object is not a blob: $tree_id:$filename"
				;;
			b/*)	filename="${filename#b/}"
				;;
		esac

		set -- "$@" \
			-c "%! git cat-file -p -- $tree_id:$filename" \
			-c ":file! $(git rev-parse --show-toplevel)/[git:$tree_id]/$filename" \
			-c ":filetype detect" \
			-c ":set nomodified readonly"

		filenamei=''
	fi

	[ -z "$filename" ] ||
		set -- "$@" "$filename"

	[ -z "$lineno" ] ||
		set -- "$@" "+normal ${lineno}G${column}|"

elif [ -n "$tree_id" ]; then
	tree_type="$(git cat-file -t -- "$tree_id")"

	set -- "$@" \
		-c "%! git show --stat --patch $tree_id" \
		-c ":file! /[git:$tree_id]/$tree_type" \
		-c ":filetype detect" \
		-c ":set nomodified readonly"
fi

exec vim "$@"

#!/bin/bash -efu

. shell-error

imgdir=/sysimage/stateless

cfg=/etc/sysconfig/loader
[ ! -f "$cfg" ] || . "$cfg"

stateless_init_size="${boot_stateless_init_size:-10G}"
stateless_size_mult="${boot_stateless_size_mult:-0}"
security="${boot_security-}"

#set -x
same_img_types()
{
	local f imgtype prevtype
	prevtype=""

	for f in \
		"$imgdir/system-$1.star" \
		"$imgdir/local-$2.star" \
		"$imgdir/kernel-$3/kmodules.star" \
		;
	do
		imgtype="`file -Lb "$f"`" ||
			return 1

		case "${imgtype,,}" in
			'squashfs filesystem'*)
				imgtype="squashfs"
				;;
			*)
				imgtype="tar"
				;;
		esac

		[ -z "$prevtype" ] || [ "$prevtype" = "$imgtype" ] ||
			return 1

		prevtype="$imgtype"
	done
}

boot_parameters()
{
	local reldir f imgtype prevtype params

	params=( ro panic=30 rdlog=console ${security:+security="$security"} )
	reldir="${imgdir#/}"
	imgtype="`file -Lb "$imgdir/system-$1.star"`"

	case "${imgtype,,}" in
		'squashfs filesystem'*)
			params+=( root=pipeline pipeline=waitdev,mountfs,mountfs,mountfs,mountfs,overlayfs,rootfs )
			params+=( waitdev=LABEL=ROOT )
			params+=( mountfs=dev )
			params+=( mountfs=pipe1/$reldir/local-$2.star )
			params+=( mountfs=pipe1/$reldir/kernel-$3/kmodules.star )
			params+=( mountfs=pipe1/$reldir/system-$1.star )
			params+=( overlayfs=pipe2,pipe3,pipe4 )
			;;
		*)
			params+=( root=pipeline pipeline=waitdev,mountfs,stateless,rootfs )
			params+=( waitdev=LABEL=ROOT )
			params+=( mountfs=dev )
			params+=( stateless_init_size="$stateless_init_size" )
			params+=( stateless_size_mult="$stateless_size_mult" )
			params+=( stateless_images="$reldir/system-$1.star,$reldir/local-$2.star,$reldir/kernel-$3/kmodules.star" )
			;;
	esac

	printf ' %s' "${params[@]}"
}

grub_line()
{
	local a max="$1"
	shift

	for a; do
		local i=0
		while [ "$i" -lt "$max" ]; do
			printf '  '
			i=$(($i + 1))
		done
		printf '%s\n' "$a"
	done
}

config_grub()
{
	local system_stars kernels

	system_stars=()
	readarray -t system_stars < <(
		find "$imgdir" \
			-mindepth 1 -maxdepth 1 -type f \
			-name 'system-*.star' \
			-printf '%f\n' |
		sort --version-sort
	)

	kernels=()
	readarray -t kernels < <(
		find "$imgdir" \
			-mindepth 1 -maxdepth 1 -type d \
			-name 'kernel-*' \
			-printf '%f\n' |
		sort --version-sort
	)

	grub_line 0 "set default=0"
	grub_line 0 "set timeout="
	grub_line 0 ""

	if [ -e "$imgdir/system-stable.star" ] && [ -e "$imgdir/kernel-latest" ]; then
		grub_line 0 "menuentry 'latest star' {"
		grub_line 1 "linux  $imgdir/kernel-latest/vmlinuz $(boot_parameters stable latest latest)"
		grub_line 1 "initrd $imgdir/kernel-latest/initrd.img"
		grub_line 0 "}"
	fi

	vendors=()
	readarray -t vendors < <(
		printf '%s\n' "${system_stars[@]}" |
			sed -r -n -e 's/^system-([^0-9][^-]+)-.*\.star/\1/p' |
			sort -u
	)

	for vendor in "${vendors[@]}"; do
		grub_line 0 "submenu 'system $vendor' {"

		if
			[ -e "$imgdir/system-$vendor.star" ] &&
			[ -e "$imgdir/kernel-latest"       ] &&
			same_img_types "$vendor" "$vendor" latest
		then
			grub_line 1 "menuentry 'latest $vendor star' {"
			grub_line 2 "linux  $imgdir/kernel-latest/vmlinuz $(boot_parameters "$vendor" "$vendor" latest)"
			grub_line 2 "initrd $imgdir/kernel-latest/initrd.img"
			grub_line 1 "}"
		fi

		grub_line 1 "submenu 'advanced $vendor stars' {"

		for system in "${system_stars[@]}"; do
			[ -z "${system##system-$vendor-*}" ] ||
				continue

			s_ver="${system#system-$vendor-}"
			s_ver="${s_ver%.star}"

			for kernel in "${kernels[@]}"; do
				k_ver="${kernel#kernel-}"

				same_img_types "$vendor-$s_ver" "$vendor" "$k_ver" ||
					continue

				grub_line 2 "menuentry 'star ($s_ver $k_ver)' {"
				grub_line 3 "linux  $imgdir/kernel-$k_ver/vmlinuz $(boot_parameters "$vendor-$s_ver" "$vendor" "$k_ver")"
				grub_line 3 "initrd $imgdir/kernel-$k_ver/initrd.img"
				grub_line 2 "}"
			done
		done

		grub_line 1 '}'
		grub_line 0 '}'
	done
}

loader="grub"
if [ "$#" -gt 0 ]; then
	loader="$1"
	shift
fi

case "$loader" in
	grub)
		config_grub
		;;
esac
